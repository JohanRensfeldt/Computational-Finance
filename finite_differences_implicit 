import numpy as np
from scipy.linalg import solve
import scipy.special as sp


K = 15.0      # Strike price
s0 = 14.0      # Initial stock price
S_max =  K * 4 # Maximum stock price
T = 0.5        # Time to expiration
r = 0.1       # Risk-free rate
sigma = 0.25    # Volatility
gamma = 1.0    # Elasticity parameter for CEV
M = 100        # Number of stock price steps
N = 100     # Number of time steps

dS = S_max / float(M)
dt = T / float(N)

def bsexact(sigma, R, K, T, s):

    d1 = (np.log(s/K) + (R + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

    d2 = d1 - sigma * np.sqrt(T)

    F = 0.5 * s * (1 + sp.erf(d1 / np.sqrt(2))) - np.exp(-R * T) * K * 0.5 * (1 + sp.erf(d2 / np.sqrt(2)))

    return F

i_values = np.linspace(0, S_max, M+1)
j_values = np.linspace(0, T, N+1)
grid = np.zeros((M+1, N+1))

grid[:, -1] = np.maximum(0, i_values - K)

for j in reversed(range(N)):
    diag = np.zeros(M-1)
    sub_diag = np.zeros(M-2)
    super_diag = np.zeros(M-2)

    for i in range(1, M):
        S = i * dS
        S_alpha = S ** gamma

        diag[i-1] = 1 + dt * (sigma ** 2 * S_alpha ** 2 + r)
        
        if i > 1:
            sub_diag[i-2] = -0.5 * dt * (sigma ** 2 * S_alpha ** 2 - r * S)
        
        if i < M-1:
            super_diag[i-1] = -0.5 * dt * (sigma ** 2 * S_alpha ** 2 + r * S)

    A = np.diag(diag) + np.diag(sub_diag, k=-1) + np.diag(super_diag, k=1)
    
    B = grid[1:M, j+1]

    B[-1] += 0.5 * dt * (sigma ** 2 * S_max ** (2 * gamma) + r * S_max) * (S_max - K * np.exp(-r * dt * (N-j)))

    grid[1:M, j] = np.linalg.solve(A, B)

# Extract option price
option_price = grid[int(M * K / S_max), 0]

print("European Call Option Price CEV model: ", option_price)

print("European Call Option Price BS model: ", bsexact(sigma, r, K, T, s0))

print("Error: ", option_price - bsexact(sigma, r, K, T, s0))